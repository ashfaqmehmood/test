name: Windows Server Remote Access

on: 
  workflow_dispatch:

jobs:
  build:
    name: Windows Server Setup
    runs-on: windows-latest
    timeout-minutes: 9999
    
    steps:
    - name: Set up Local User
      run: |
        Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText $Env:WINDOWS_USER_PASSWORD -Force)
      env:
        WINDOWS_USER_PASSWORD: ${{ secrets.WINDOWS_USER_PASSWORD }}

    - name: Download Required Files
      run: |
        Invoke-WebRequest https://github.com/ashfaqmehmood/test/blob/main/assets/ngrok.exe?raw=true -OutFile ngrok.exe
        Invoke-WebRequest https://raw.githubusercontent.com/ashfaqmehmood/test/main/resources/ngrok-user.bat -OutFile ngrok-user.bat
        Invoke-WebRequest https://raw.githubusercontent.com/ashfaqmehmood/test/main/resources/ngrok-loop.bat -OutFile ngrok-loop.bat

    - name: Copy NGROK to Windows Directory
      run: copy ngrok.exe C:\Windows\System32

    - name: Create NGROK Configuration
      run: |
        @"
        version: 2
        authtoken: ${{ secrets.NGROK_AUTH_TOKEN }}
        tunnels:
          rdp:
            proto: http
            addr: 3389
        "@ | Out-File -FilePath C:\Windows\System32\ngrok.yml -Encoding ASCII

    - name: Enable Remote Desktop
      run: |
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -Value 0
        Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
        Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -Value 1

    - name: Start NGROK
      run: |
        Start-Process -FilePath C:\Windows\System32\ngrok.exe -ArgumentList "http 3389 --log=C:\ngrok.log --log-format=json --config=C:\Windows\System32\ngrok.yml" -NoNewWindow

    - name: Check NGROK Logs
      run: |
        Start-Sleep -Seconds 10
        Get-Content C:\ngrok.log -Tail 20

    - name: Verify NGROK Process
      run: |
        $ngrokProcess = Get-Process ngrok -ErrorAction SilentlyContinue
        if ($ngrokProcess) {
          Write-Host "NGROK is running with PID: $($ngrokProcess.Id)"
        } else {
          Write-Error "NGROK process not found"
          exit 1
        }

    - name: Get NGROK Public URL
      run: |
        $maxAttempts = 5
        $attempt = 0
        do {
          $attempt++
          try {
            $tunnels = Invoke-RestMethod -Uri http://localhost:4040/api/tunnels -ErrorAction Stop
            $publicUrl = $tunnels.tunnels[0].public_url
            Write-Host "NGROK Public URL: $publicUrl"
            break
          } catch {
            Write-Host "Attempt $attempt: Failed to get NGROK public URL. Retrying in 5 seconds..."
            Start-Sleep -Seconds 5
          }
        } while ($attempt -lt $maxAttempts)
        
        if ($attempt -eq $maxAttempts) {
          Write-Error "Failed to get NGROK public URL after $maxAttempts attempts"
          exit 1
        }

    - name: Keep Alive
      run: |
        while ($true) {
          Write-Host "Keeping session alive. Current time: $(Get-Date)"
          Start-Sleep -Seconds 600
        }
